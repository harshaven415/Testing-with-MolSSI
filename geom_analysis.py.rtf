{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red246\green246\blue246;\red38\green38\blue38;
\red0\green0\blue255;\red83\green83\blue83;\red151\green0\blue255;\red169\green14\blue26;\red171\green79\blue117;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c97255\c97255\c97255;\cssrgb\c20000\c20000\c20000;
\cssrgb\c0\c0\c100000;\cssrgb\c40000\c40000\c40000;\cssrgb\c66667\c13333\c100000;\cssrgb\c72941\c12941\c12941;\cssrgb\c73333\c40000\c53333;
}
\margl1440\margr1440\vieww19680\viewh14580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
import
\f1\b0 \cf4  
\f0\b \cf5 numpy
\f1\b0 \cf4 \

\f0\b \cf2 import
\f1\b0 \cf4  
\f0\b \cf5 os
\f1\b0 \cf4 \
\

\f0\b \cf2 def
\f1\b0 \cf4  \cf5 calculate_distance\cf4 (atom1_coord, atom2_coord):\
    x_distance \cf6 =\cf4  atom1_coord[\cf6 0\cf4 ] \cf6 -\cf4  atom2_coord[\cf6 0\cf4 ]\
    y_distance \cf6 =\cf4  atom1_coord[\cf6 1\cf4 ] \cf6 -\cf4  atom2_coord[\cf6 1\cf4 ]\
    z_distance \cf6 =\cf4  atom1_coord[\cf6 2\cf4 ] \cf6 -\cf4  atom2_coord[\cf6 2\cf4 ]\
    bond_length_12 \cf6 =\cf4  numpy.sqrt(x_distance\cf6 **2+\cf4 y_distance\cf6 **2+\cf4 z_distance\cf6 **2\cf4 )\
    
\f0\b \cf2 return
\f1\b0 \cf4  bond_length_12\
\

\f0\b \cf2 def
\f1\b0 \cf4  \cf5 bond_check\cf4 (atom_distance, minimum_length\cf6 =0\cf4 , maximum_length\cf6 =1.5\cf4 ):\
    
\f0\b \cf2 if
\f1\b0 \cf4  atom_distance \cf6 >\cf4  minimum_length 
\f0\b \cf7 and
\f1\b0 \cf4  atom_distance \cf6 <=\cf4  maximum_length:\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf2 True\cf4 \
    
\f0\b \cf2 else
\f1\b0 \cf4 :\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf2 False\cf4 \
\

\f0\b \cf2 def
\f1\b0 \cf4  \cf5 open_xyz\cf4 (filename):\
     xyz_file \cf6 =\cf4  numpy.genfromtxt(fname\cf6 =\cf4 filename, skip_header\cf6 =2\cf4 , dtype\cf6 =\cf8 'unicode'\cf4 )\
     symbols \cf6 =\cf4  xyz_file[:,\cf6 0\cf4 ]\
     coord \cf6 =\cf4  (xyz_file[:,\cf6 1\cf4 :])\
     coord \cf6 =\cf4  coord.astype(numpy.\cf2 float\cf4 )\
     
\f0\b \cf2 return
\f1\b0 \cf4  symbols, coord\
\
file_location \cf6 =\cf4  os.path.join(\cf8 'data'\cf4 , \cf8 'water.xyz'\cf4 )\
symbols, coord \cf6 =\cf4  open_xyz(file_location)\
num_atoms \cf6 =\cf4  \cf2 len\cf4 (symbols)\

\f0\b \cf2 for
\f1\b0 \cf4  num1 
\f0\b \cf7 in
\f1\b0 \cf4  \cf2 range\cf4 (\cf6 0\cf4 ,num_atoms):\
     
\f0\b \cf2 for
\f1\b0 \cf4  num2 
\f0\b \cf7 in
\f1\b0 \cf4  \cf2 range\cf4 (\cf6 0\cf4 ,num_atoms):\
         
\f0\b \cf2 if
\f1\b0 \cf4  num1\cf6 <\cf4 num2:\
             bond_length_12 \cf6 =\cf4  calculate_distance(coord[num1], coord[num2])\
             
\f0\b \cf2 if
\f1\b0 \cf4  bond_check(bond_length_12) 
\f0\b \cf7 is
\f1\b0 \cf4  \cf2 True\cf4 :\
                 
\f0\b \cf2 print
\f1\b0 \cf4 (\cf8 F'
\f0\b \cf9 \{
\f1\b0 \cf4 symbols[num1]
\f0\b \cf9 \}
\f1\b0 \cf8  to 
\f0\b \cf9 \{
\f1\b0 \cf4 symbols[num2]
\f0\b \cf9 \}
\f1\b0 \cf8  : 
\f0\b \cf9 \{
\f1\b0 \cf4 bond_length_12:.\cf6 3\cf4 f
\f0\b \cf9 \}
\f1\b0 \cf8 '\cf4 )}