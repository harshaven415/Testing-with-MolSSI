{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red169\green14\blue26;\red246\green246\blue246;\red15\green112\blue1;
\red38\green38\blue38;\red0\green0\blue255;\red83\green83\blue83;\red151\green0\blue255;\red171\green79\blue117;
}
{\*\expandedcolortbl;;\cssrgb\c72941\c12941\c12941;\cssrgb\c97255\c97255\c97255;\cssrgb\c0\c50196\c0;
\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c0\c100000;\cssrgb\c40000\c40000\c40000;\cssrgb\c66667\c13333\c100000;\cssrgb\c73333\c40000\c53333;
}
\margl1440\margr1440\vieww29740\viewh18600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
"""\
This module has functions associated with analyzing the geometry of a molecule.\
\
When run as a script and given an xyz file, this script will print out the bonds. Run \
\
$ python geometry_analysis.py --help \
\
to see input options.\
"""
\f1\b \cf4 \
\
\
import
\f0\b0 \cf5  
\f1\b \cf6 numpy
\f0\b0 \cf5 \

\f1\b \cf4 import
\f0\b0 \cf5  
\f1\b \cf6 os
\f0\b0 \cf5 \
\

\f1\b \cf4 def
\f0\b0 \cf5  \cf6 calculate_distance\cf5 (atom1_coord, atom2_coord):\
    x_distance \cf7 =\cf5  atom1_coord[\cf7 0\cf5 ] \cf7 -\cf5  atom2_coord[\cf7 0\cf5 ]\
    y_distance \cf7 =\cf5  atom1_coord[\cf7 1\cf5 ] \cf7 -\cf5  atom2_coord[\cf7 1\cf5 ]\
    z_distance \cf7 =\cf5  atom1_coord[\cf7 2\cf5 ] \cf7 -\cf5  atom2_coord[\cf7 2\cf5 ]\
    bond_length_12 \cf7 =\cf5  numpy.sqrt(x_distance\cf7 **2+\cf5 y_distance\cf7 **2+\cf5 z_distance\cf7 **2\cf5 )\
    
\f1\b \cf4 return
\f0\b0 \cf5  bond_length_12\
\

\f1\b \cf4 def
\f0\b0 \cf5  \cf6 bond_check\cf5 (atom_distance, minimum_length\cf7 =0\cf5 , maximum_length\cf7 =1.5\cf5 ):\
    
\f1\b \cf4 if
\f0\b0 \cf5  atom_distance \cf7 >\cf5  minimum_length 
\f1\b \cf8 and
\f0\b0 \cf5  atom_distance \cf7 <=\cf5  maximum_length:\
        
\f1\b \cf4 return
\f0\b0 \cf5  \cf4 True\cf5 \
    
\f1\b \cf4 else
\f0\b0 \cf5 :\
        
\f1\b \cf4 return
\f0\b0 \cf5  \cf4 False\cf5 \
\

\f1\b \cf4 def
\f0\b0 \cf5  \cf6 open_xyz\cf5 (filename):\
     xyz_file \cf7 =\cf5  numpy.genfromtxt(fname\cf7 =\cf5 filename, skip_header\cf7 =2\cf5 , dtype\cf7 =\cf2 'unicode'\cf5 )\
     symbols \cf7 =\cf5  xyz_file[:,\cf7 0\cf5 ]\
     coord \cf7 =\cf5  (xyz_file[:,\cf7 1\cf5 :])\
     coord \cf7 =\cf5  coord.astype(numpy.\cf4 float\cf5 )\
     
\f1\b \cf4 return
\f0\b0 \cf5  symbols, coord\
\
file_location \cf7 =\cf5  os.path.join(\cf2 'data'\cf5 , \cf2 'water.xyz'\cf5 )\
symbols, coord \cf7 =\cf5  open_xyz(file_location)\
num_atoms \cf7 =\cf5  \cf4 len\cf5 (symbols)\

\f1\b \cf4 for
\f0\b0 \cf5  num1 
\f1\b \cf8 in
\f0\b0 \cf5  \cf4 range\cf5 (\cf7 0\cf5 ,num_atoms):\
     
\f1\b \cf4 for
\f0\b0 \cf5  num2 
\f1\b \cf8 in
\f0\b0 \cf5  \cf4 range\cf5 (\cf7 0\cf5 ,num_atoms):\
         
\f1\b \cf4 if
\f0\b0 \cf5  num1\cf7 <\cf5 num2:\
             bond_length_12 \cf7 =\cf5  calculate_distance(coord[num1], coord[num2])\
             
\f1\b \cf4 if
\f0\b0 \cf5  bond_check(bond_length_12) 
\f1\b \cf8 is
\f0\b0 \cf5  \cf4 True\cf5 :\
                 
\f1\b \cf4 print
\f0\b0 \cf5 (\cf2 F'
\f1\b \cf9 \{
\f0\b0 \cf5 symbols[num1]
\f1\b \cf9 \}
\f0\b0 \cf2  to 
\f1\b \cf9 \{
\f0\b0 \cf5 symbols[num2]
\f1\b \cf9 \}
\f0\b0 \cf2  : 
\f1\b \cf9 \{
\f0\b0 \cf5 bond_length_12:.\cf7 3\cf5 f
\f1\b \cf9 \}
f0\b0 \cf2 '\cf5 )}

I am adding lines at the bottom to determine how to commit files to git
